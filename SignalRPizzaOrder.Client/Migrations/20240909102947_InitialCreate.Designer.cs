// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Repositories.Context;

#nullable disable

namespace SignalRPizzaOrder.Client.Migrations
{
    [DbContext(typeof(RepositoryContext))]
    [Migration("20240909102947_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0-preview.7.24405.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Repositories.Entities.Account", b =>
                {
                    b.Property<int>("AccountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("AccountId"));

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)");

                    b.Property<string>("Type")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)");

                    b.HasKey("AccountId");

                    b.ToTable("Accounts");

                    b.HasData(
                        new
                        {
                            AccountId = 1,
                            FullName = "John Doe",
                            Password = "password123",
                            Type = "Savings",
                            UserName = "johndoe"
                        },
                        new
                        {
                            AccountId = 2,
                            FullName = "Jane Smith",
                            Password = "mypassword",
                            Type = "Checking",
                            UserName = "janesmith"
                        },
                        new
                        {
                            AccountId = 3,
                            FullName = "Michael Johnson",
                            Password = "securepass",
                            Type = "Business",
                            UserName = "michaelj"
                        });
                });

            modelBuilder.Entity("Repositories.Entities.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("CategoryID");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CategoryId"));

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("Description");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            CategoryId = 1,
                            CategoryName = "Electronics",
                            Description = "Electronic Items"
                        },
                        new
                        {
                            CategoryId = 2,
                            CategoryName = "Clothing",
                            Description = "Clothing Items"
                        },
                        new
                        {
                            CategoryId = 3,
                            CategoryName = "Grocery",
                            Description = "Grocery Items"
                        });
                });

            modelBuilder.Entity("Repositories.Entities.Customer", b =>
                {
                    b.Property<int>("CustomerID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CustomerID"));

                    b.Property<string>("Address")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("ContactName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Phone")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("CustomerID");

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            CustomerID = 1,
                            Address = "123 Maple Street, Springfield",
                            ContactName = "Alice Johnson",
                            Password = "alice123",
                            Phone = "555-1234"
                        },
                        new
                        {
                            CustomerID = 2,
                            Address = "456 Oak Avenue, Rivertown",
                            ContactName = "Bob Smith",
                            Password = "bobsecure",
                            Phone = "555-5678"
                        },
                        new
                        {
                            CustomerID = 3,
                            Address = "789 Pine Road, Lakeview",
                            ContactName = "Catherine Lee",
                            Password = "catlee2024",
                            Phone = "555-9012"
                        });
                });

            modelBuilder.Entity("Repositories.Entities.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("OrderId");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("OrderId"));

                    b.Property<int>("CustomerId")
                        .HasColumnType("integer");

                    b.Property<decimal?>("Freight")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<DateOnly?>("OrderDate")
                        .HasColumnType("date");

                    b.Property<DateOnly?>("RequiredDate")
                        .HasColumnType("date");

                    b.Property<string>("ShipAddress")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("ShipAddress");

                    b.Property<DateOnly?>("ShippedDate")
                        .HasColumnType("date");

                    b.HasKey("OrderId");

                    b.HasIndex("CustomerId");

                    b.ToTable("Order");

                    b.HasData(
                        new
                        {
                            OrderId = 1,
                            CustomerId = 1,
                            Freight = 25.50m,
                            OrderDate = new DateOnly(2024, 9, 1),
                            RequiredDate = new DateOnly(2024, 9, 10),
                            ShipAddress = "123 Elm Street, Springfield",
                            ShippedDate = new DateOnly(2024, 9, 5)
                        },
                        new
                        {
                            OrderId = 2,
                            CustomerId = 2,
                            Freight = 15.75m,
                            OrderDate = new DateOnly(2024, 8, 15),
                            RequiredDate = new DateOnly(2024, 8, 25),
                            ShipAddress = "456 Oak Avenue, Rivertown",
                            ShippedDate = new DateOnly(2024, 8, 20)
                        },
                        new
                        {
                            OrderId = 3,
                            CustomerId = 3,
                            Freight = 30.00m,
                            OrderDate = new DateOnly(2024, 7, 20),
                            RequiredDate = new DateOnly(2024, 7, 30),
                            ShipAddress = "789 Pine Road, Lakeview",
                            ShippedDate = new DateOnly(2024, 7, 25)
                        });
                });

            modelBuilder.Entity("Repositories.Entities.OrderDetail", b =>
                {
                    b.Property<int>("OrderDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("OrderDetailId"));

                    b.Property<int>("OrderId")
                        .HasColumnType("integer");

                    b.Property<int>("ProductId")
                        .HasColumnType("integer");

                    b.Property<int?>("Quantity")
                        .HasColumnType("integer");

                    b.Property<decimal?>("UnitPrice")
                        .HasColumnType("decimal(10, 2)");

                    b.HasKey("OrderDetailId");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderDetails");

                    b.HasData(
                        new
                        {
                            OrderDetailId = 1,
                            OrderId = 1,
                            ProductId = 1,
                            Quantity = 2,
                            UnitPrice = 50.00m
                        },
                        new
                        {
                            OrderDetailId = 2,
                            OrderId = 2,
                            ProductId = 2,
                            Quantity = 5,
                            UnitPrice = 25.00m
                        },
                        new
                        {
                            OrderDetailId = 3,
                            OrderId = 3,
                            ProductId = 3,
                            Quantity = 1,
                            UnitPrice = 100.00m
                        });
                });

            modelBuilder.Entity("Repositories.Entities.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("ProductId");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ProductId"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("integer")
                        .HasColumnName("CategoryId");

                    b.Property<string>("ProductImage")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("ProductImage");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("ProductName");

                    b.Property<string>("QuantityPerUnit")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("QuantityPerUnit");

                    b.Property<int>("SupplierId")
                        .HasColumnType("integer")
                        .HasColumnName("SupplierId");

                    b.Property<decimal?>("UnitPrice")
                        .HasColumnType("decimal(10, 2)");

                    b.HasKey("ProductId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("SupplierId");

                    b.ToTable("Product");

                    b.HasData(
                        new
                        {
                            ProductId = 1,
                            CategoryId = 1,
                            ProductImage = "headphones.jpg",
                            ProductName = "Wireless Headphones",
                            QuantityPerUnit = "1 pair",
                            SupplierId = 1,
                            UnitPrice = 50.00m
                        },
                        new
                        {
                            ProductId = 2,
                            CategoryId = 1,
                            ProductImage = "speaker.jpg",
                            ProductName = "Bluetooth Speaker",
                            QuantityPerUnit = "1 piece",
                            SupplierId = 2,
                            UnitPrice = 25.00m
                        },
                        new
                        {
                            ProductId = 3,
                            CategoryId = 2,
                            ProductImage = "smartwatch.jpg",
                            ProductName = "Smartwatch",
                            QuantityPerUnit = "1 piece",
                            SupplierId = 3,
                            UnitPrice = 100.00m
                        });
                });

            modelBuilder.Entity("Repositories.Entities.Supplier", b =>
                {
                    b.Property<int>("SupplierId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("SupplierId");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SupplierId"));

                    b.Property<string>("Address")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("Address");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("CompanyName");

                    b.Property<string>("Phone")
                        .HasColumnType("text")
                        .HasColumnName("Phone");

                    b.HasKey("SupplierId");

                    b.ToTable("Supplier");

                    b.HasData(
                        new
                        {
                            SupplierId = 1,
                            Address = "123 Tech Lane, Silicon Valley",
                            CompanyName = "Tech Supplies Inc.",
                            Phone = "555-1234"
                        },
                        new
                        {
                            SupplierId = 2,
                            Address = "456 Audio Street, Music City",
                            CompanyName = "Sound Systems Co.",
                            Phone = "555-5678"
                        },
                        new
                        {
                            SupplierId = 3,
                            Address = "789 Device Road, Innovation Park",
                            CompanyName = "Gadget World",
                            Phone = "555-9012"
                        });
                });

            modelBuilder.Entity("Repositories.Entities.Order", b =>
                {
                    b.HasOne("Repositories.Entities.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Repositories.Entities.OrderDetail", b =>
                {
                    b.HasOne("Repositories.Entities.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Repositories.Entities.Product", "Product")
                        .WithMany("OrderDetails")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Repositories.Entities.Product", b =>
                {
                    b.HasOne("Repositories.Entities.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Repositories.Entities.Supplier", "Supplier")
                        .WithMany("Products")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("Repositories.Entities.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Repositories.Entities.Customer", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Repositories.Entities.Order", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("Repositories.Entities.Product", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("Repositories.Entities.Supplier", b =>
                {
                    b.Navigation("Products");
                });
#pragma warning restore 612, 618
        }
    }
}
